import { Church, Config } from "../../constants/config";
import { CatholicDTO } from "../../commons/DTOs/CatholicDTO";
import { checkNetwork } from "@/hooks/NetworkManager";
import { HttpGetData, HttpPostData } from "../HttpWithToken";

let churchListCache: any = null; // L∆∞u cache danh s√°ch nh√† th·ªù
let churchListPromise: Promise<any> | null = null;

export const ChurchControllerAPI = {
    create: async (dtoCatholic: CatholicDTO): Promise<any> => {
        if (!checkNetwork()) {
            console.log('Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng!');
            return;
        }
        const url = Config.server + Church.create;
        try {
            const response = await HttpPostData(url, dtoCatholic);

            if (!response) console.log("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server");

            console.debug("--- Catholic Data Response: ", response);
            return response;
        } catch (error) {
            console.log("-- L·ªói Khi T·∫°o Church: ", error);
            // throw error; // N√©m l·ªói ƒë·ªÉ ph√≠a g·ªçi API x·ª≠ l√Ω
        }
    },

    update: async (dtoCatholic: CatholicDTO): Promise<any> => {
        if (!checkNetwork()) {
            console.log('Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng!');
            return;
        }
        const url = Config.server + Church.update;
        try {
            const response = await HttpPostData(url, dtoCatholic);

            if (!response) console.log("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server");

            console.debug("--- Catholic Data Response: ", response);
            return response;
        } catch (error) {
            console.log("-- L·ªói Khi C·∫≠p Nh·∫≠t Church: ", error);
            // throw error; // N√©m l·ªói ƒë·ªÉ ph√≠a g·ªçi API x·ª≠ l√Ω
        }
    },

    getById: async (idChurch: string): Promise<any> => {
        if (!checkNetwork()) {
            console.log('Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng!');
            return;
        }
        const url = Config.server + Church.getById + `?idChurch=${idChurch}`;

        try {
            const response = await HttpGetData(url);

            return response;
        } catch (error) {
            console.log("L·ªói khi t·∫£i Church by Id:", error);
            throw error;
        }
    },

    getChurchList: async (forceRefresh: boolean = false): Promise<any> => {
        if (!checkNetwork()) {
            console.log('Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng!');
            return;
        }
        const url = Config.server + Church.getChurchList;

        // N·∫øu ƒë√£ c√≥ cache v√† kh√¥ng y√™u c·∫ßu l√†m m·ªõi, tr·∫£ v·ªÅ cache ngay l·∫≠p t·ª©c
        if (!forceRefresh && churchListCache) {
            console.log("D·ªØ li·ªáu nh√† th·ªù l·∫•y t·ª´ cache.");
            return Promise.resolve(churchListCache);
        }

        // N·∫øu API ƒëang ƒë∆∞·ª£c g·ªçi v√† ch∆∞a ho√†n th√†nh, ƒë·ª£i k·∫øt qu·∫£ t·ª´ Promise ƒë√£ c√≥
        if (!forceRefresh && churchListPromise) {
            console.log("‚è≥ ƒêang t·∫£i danh s√°ch nh√† th·ªù, vui l√≤ng ch·ªù...");
            return churchListPromise;
        }
        try {
            console.log("G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch nh√† th·ªù...");
            churchListPromise = HttpGetData(url);

            const response = await churchListPromise;

            // L∆∞u cache sau khi l·∫•y d·ªØ li·ªáu th√†nh c√¥ng
            churchListCache = response;
            churchListPromise = null;
            return response;
        } catch (error) {
            console.log("L·ªói khi t·∫£i Church:", error);
            churchListPromise = null; // X√≥a Promise n·∫øu request l·ªói ƒë·ªÉ th·ª≠ l·∫°i sau
        }
    },

    delete: async (idChurch: string): Promise<any> => {
        if (!checkNetwork()) {
            console.log('Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng!');
            return;
        }
        const url = Config.server + Church.delete + `?idChurch=${idChurch}`;
        try {
            const objDelete = {
                idChurch
            };
            let response = await HttpPostData(url, objDelete);
            console.log("-- ƒê√£ c·∫≠p nh·∫≠t Is deleted: ", response);
            return response;
        } catch (error) {
            console.log("L·ªói khi xo√° Church:", error);
        }
    },

    clearCache: () => {
        console.log("üóëÔ∏è X√≥a cache danh s√°ch nh√† th·ªù.");
        churchListCache = null;
        churchListPromise = null;
    },
};